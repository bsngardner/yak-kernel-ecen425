; Generated by c86 (BYU-NASM) 5.1 (beta) from sih.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_sih_1:
	DB	"Game over. Lines cleared: ",0
	ALIGN	2
gameover_handler:
	; >>>>> Line:	30
	; >>>>> void gameover_handler(){ 
	jmp	L_sih_2
L_sih_3:
	; >>>>> Line:	31
	; >>>>> printString("Game over. Lines cleared: "); 
	mov	ax, L_sih_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printInt(score); 
	push	word [score]
	call	printInt
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_sih_2:
	push	bp
	mov	bp, sp
	jmp	L_sih_3
	ALIGN	2
L_sih_5:
	DW	0
	ALIGN	2
newpiece_handler:
	; >>>>> Line:	37
	; >>>>> void newpiece_handler(){ 
	jmp	L_sih_6
L_sih_7:
	; >>>>> Line:	39
	; >>>>> piece = new_piece + dex; 
	mov	ax, word [L_sih_5]
	mov	cx, 12
	imul	cx
	add	ax, new_piece
	mov	word [piece], ax
	; >>>>> Line:	40
	; >>>>> if(++dex >= 8) 
	mov	ax, word [L_sih_5]
	inc	ax
	mov	word [L_sih_5], ax
	cmp	ax, 8
	jl	L_sih_8
	; >>>>> Line:	41
	; >>>>> dex = 0; 
	mov	word [L_sih_5], 0
L_sih_8:
	; >>>>> Line:	42
	; >>>>> piece->id = NewPieceID; 
	mov	si, word [piece]
	mov	ax, word [NewPieceID]
	mov	word [si], ax
	; >>>>> Line:	43
	; >>>>> piece->type = NewPieceType; 
	mov	si, word [piece]
	add	si, 2
	mov	ax, word [NewPieceType]
	mov	word [si], ax
	; >>>>> Line:	44
	; >>>>> piece->x = NewPieceColumn; 
	mov	si, word [piece]
	add	si, 4
	mov	ax, word [NewPieceColumn]
	mov	word [si], ax
	; >>>>> Line:	45
	; >>>>> piece->rot = NewPieceOrientation; 
	mov	si, word [piece]
	add	si, 6
	mov	ax, word [NewPieceOrientation]
	mov	word [si], ax
	; >>>>> Line:	46
	; >>>>> YKQPost(new_q,piece); 
	push	word [piece]
	push	word [new_q]
	call	YKQPost
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_sih_6:
	push	bp
	mov	bp, sp
	jmp	L_sih_7
	ALIGN	2
command_handler:
	; >>>>> Line:	49
	; >>>>> void  
	jmp	L_sih_10
L_sih_11:
	; >>>>> Line:	50
	; >>>>> YKSemPost(cmd_sem); 
	push	word [cmd_sem]
	call	YKSemPost
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_sih_10:
	push	bp
	mov	bp, sp
	jmp	L_sih_11
	ALIGN	2
touchdown_handler:
	; >>>>> Line:	53
	; >>>>> void touchdown_handler(){ 
	jmp	L_sih_13
L_sih_14:
	; >>>>> Line:	58
	; >>>>> bc0 = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	59
	; >>>>> bc1 = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	61
	; >>>>> b0 = (ScreenBitMap0 | ScreenBitMap1 | ScreenBitMap2); 
	mov	ax, word [ScreenBitMap0]
	or	ax, word [ScreenBitMap1]
	or	ax, word [ScreenBitMap2]
	mov	word [bp-2], ax
	; >>>>> Line:	62
	; >>>>> while(b0 != 0){ 
	jmp	L_sih_16
L_sih_15:
	; >>>>> Line:	63
	; >>>>> bc0++; 
	inc	word [bp-6]
	; >>>>> Line:	64
	; >>>>> b0 = b0 << 1; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	word [bp-2], ax
L_sih_16:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_sih_15
L_sih_17:
	; >>>>> Line:	66
	; >>>>> bin[0].ht = bc0; 
	mov	ax, word [bp-6]
	mov	word [(2+bin)], ax
	; >>>>> Line:	67
	; >>>>> b1 = (ScreenBitMap3 | ScreenBitMap4 | ScreenBitMap5); 
	mov	ax, word [ScreenBitMap3]
	or	ax, word [ScreenBitMap4]
	or	ax, word [ScreenBitMap5]
	mov	word [bp-4], ax
	; >>>>> Line:	68
	; >>>>> while(b1 != 0){ 
	jmp	L_sih_19
L_sih_18:
	; >>>>> Line:	69
	; >>>>> bc1++; 
	inc	word [bp-8]
	; >>>>> Line:	70
	; >>>>> b1 = b1 << 1; 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	word [bp-4], ax
L_sih_19:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_sih_18
L_sih_20:
	; >>>>> Line:	72
	; >>>>> bin[1].ht = bc1; 
	mov	ax, word [bp-8]
	mov	word [(8+bin)], ax
	mov	sp, bp
	pop	bp
	ret
L_sih_13:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_sih_14
	ALIGN	2
lineclear_handler:
	; >>>>> Line:	75
	; >>>>> void lineclear_handler(){ 
	jmp	L_sih_22
L_sih_23:
	; >>>>> Line:	76
	; >>>>> score++; 
	inc	word [score]
	mov	sp, bp
	pop	bp
	ret
L_sih_22:
	push	bp
	mov	bp, sp
	jmp	L_sih_23
	ALIGN	2
new_piece:
	TIMES	96 db 0
piece:
	TIMES	2 db 0
score:
	TIMES	2 db 0
