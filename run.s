        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      reset_isr ; Reset               ; Int 08h (IRQ 0)
        dd      tick_isr  ; Tick                ; Int 09h (IRQ 1)
        dd      key_isr   ; Keyboard            ; Int 0Ah (IRQ 2q)
        dd      gameover_isr ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      newpiece_isr ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      command_isr ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      touchdown_isr ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      lineclear_isr ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

	;; isr.s
	
reset_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

;;; call	reset_handler	
	call 	myreset
	
	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret

tick_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

	call	YKTickHandler
;;; 	call	tick_handler
	call	mytick

	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret

key_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

;;; 	call	key_handler
	call	mykeybrd

	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from inth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
myreset:
	; >>>>> Line:	14
	; >>>>> { 
	jmp	L_inth_1
L_inth_2:
	; >>>>> Line:	15
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_inth_1:
	push	bp
	mov	bp, sp
	jmp	L_inth_2
	ALIGN	2
mytick:
	; >>>>> Line:	19
	; >>>>> { 
	jmp	L_inth_4
L_inth_5:
	; >>>>> Line:	21
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_inth_4:
	push	bp
	mov	bp, sp
	jmp	L_inth_5
	ALIGN	2
mykeybrd:
	; >>>>> Line:	24
	; >>>>> { 
	jmp	L_inth_7
L_inth_8:
	; >>>>> Line:	26
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_inth_7:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_inth_8
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
tcb_dex:
	DW	0
active_task:
	DW	init_tcb
ready_task:
	DW	0
blocked_task:
	DW	0
sem_dex:
	DW	0
q_dex:
	DW	0
event_dex:
	DW	0
kernel_running:
	DW	0
YKIdleCount:
	DW	0
YKCallDepth:
	DW	0
YKCtxSwCount:
	DW	0
YKTickNum:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	47
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_4
L_yakc_5:
	; >>>>> Line:	49
	; >>>>> YKNewTask(YKIdleTask, &idle_stack[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (idle_stack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_4:
	push	bp
	mov	bp, sp
	jmp	L_yakc_5
L_yakc_7:
	DB	"Out of available TCB memory",0
	ALIGN	2
YKNewTask:
	; >>>>> Line:	56
	; >>>>>  
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	58
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	59
	; >>>>> if(tcb_dex >= 4){ 
	cmp	word [tcb_dex], 4
	jl	L_yakc_10
	; >>>>> Line:	60
	; >>>>> printString("Out of available TCB memory"); 
	mov	ax, L_yakc_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	62
	; >>>>> return; 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	65
	; >>>>> task_tcb = tcb_memory + tcb_dex; 
	mov	ax, word [tcb_dex]
	mov	cx, 10
	imul	cx
	add	ax, tcb_memory
	mov	word [bp-2], ax
	; >>>>> Line:	66
	; >>>>> task_tcb->id = tcb_dex++; 
	mov	ax, word [tcb_dex]
	inc	word [tcb_dex]
	mov	si, word [bp-2]
	mov	byte [si], al
	; >>>>> Line:	68
	; >>>>> task_tcb->priority = priority; 
	mov	si, word [bp-2]
	inc	si
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	69
	; >>>>> task_tcb->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	70
	; >>>>> task_tcb->sp = (int*)((char*)taskStack); 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	71
	; >>>>> task_tcb->ss = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	72
	; >>>>> task_tcb->tick_num = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	75
	; >>>>> *(task_tcb->sp - 12) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 24
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	76
	; >>>>> *(task_tcb->sp - 11) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 22
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	77
	; >>>>> *(task_tcb->sp - 10) 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 20
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	78
	; >>>>> *(task_tcb->sp - 9) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 18
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	79
	; >>>>> *(task_tcb->sp - 8) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 16
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	80
	; >>>>> *(task_tcb->sp - 7) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 14
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	81
	; >>>>> *(task_tcb->sp - 6) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 12
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	82
	; >>>>> *(task_tcb->sp - 5) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 10
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	83
	; >>>>> *(task_tcb->sp - 4) = (int) 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 8
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	84
	; >>>>> *(task_tcb->sp - 3) = (int) task; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 6
	mov	si, ax
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	85
	; >>>>> *(task_tcb->sp - 2) = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 4
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	86
	; >>>>> *(task_tcb->sp - 1) = 0x0200; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	sub	ax, 2
	mov	si, ax
	mov	word [si], 512
	; >>>>> Line:	87
	; >>>>> task_tcb->sp -= 12; 
	mov	si, word [bp-2]
	add	si, 6
	sub	word [si], 24
	; >>>>> Line:	89
	; >>>>> add_task(&ready_task,task_tcb); 
	push	word [bp-2]
	mov	ax, ready_task
	push	ax
	call	add_task
	add	sp, 4
	; >>>>> Line:	91
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	93
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_9
	ALIGN	2
YKRun:
	; >>>>> Line:	99
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	101
	; >>>>> kernel_running = 1; 
	mov	word [kernel_running], 1
	; >>>>> Line:	102
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	103
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	104
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	jmp	L_yakc_14
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	107
	; >>>>> >= 4){ 
	jmp	L_yakc_16
L_yakc_17:
	; >>>>> Line:	112
	; >>>>> if(!count) 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_18
	; >>>>> Line:	113
	; >>>>> return; 
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	114
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	115
	; >>>>> task = pop_task(&ready_task); 
	mov	ax, ready_task
	push	ax
	call	pop_task
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	116
	; >>>>> task->tick_num = YKTickNum + count; 
	mov	ax, word [YKTickNum]
	add	ax, word [bp+4]
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], ax
	; >>>>> Line:	117
	; >>>>> block_task(task); 
	push	word [bp-2]
	call	block_task
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	119
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_19:
	mov	sp, bp
	pop	bp
	ret
L_yakc_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_17
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	122
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_21
L_yakc_22:
	; >>>>> Line:	124
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	125
	; >>>>> while(blocked_task && (blocked_task->tick_num <= YKTickNum)){ 
	jmp	L_yakc_24
L_yakc_23:
	; >>>>> Line:	126
	; >>>>> task = pop_task(&blocked_task); 
	mov	ax, blocked_task
	push	ax
	call	pop_task
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	127
	; >>>>> task->tick_num = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	128
	; >>>>> add_task(&ready_task,task); 
	push	word [bp-2]
	mov	ax, ready_task
	push	ax
	call	add_task
	add	sp, 4
L_yakc_24:
	mov	ax, word [blocked_task]
	test	ax, ax
	je	L_yakc_26
	mov	si, word [blocked_task]
	add	si, 2
	mov	ax, word [YKTickNum]
	cmp	ax, word [si]
	jge	L_yakc_23
L_yakc_26:
L_yakc_25:
	mov	sp, bp
	pop	bp
	ret
L_yakc_21:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_22
L_yakc_29:
	DB	"Semaphore starting value less than 0",0
L_yakc_28:
	DB	"Out of available semaphore memory",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	132
	; >>>>> YKSEM* YKSemCreate(int initial_value){ 
	jmp	L_yakc_30
L_yakc_31:
	; >>>>> Line:	134
	; >>>>> if(sem_dex >= 4){ 
	cmp	word [sem_dex], 4
	jl	L_yakc_32
	; >>>>> Line:	135
	; >>>>> llDepth > 
	mov	ax, L_yakc_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	137
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	139
	; >>>>> if(initial_value < 0){ 
	cmp	word [bp+4], 0
	jge	L_yakc_34
	; >>>>> Line:	140
	; >>>>> printString("Semaphore starting value less than 0"); 
	mov	ax, L_yakc_29
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	142
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_33
L_yakc_34:
	; >>>>> Line:	145
	; >>>>> sem = semaphore_memory + sem_dex; 
	mov	ax, word [sem_dex]
	mov	cx, 6
	imul	cx
	add	ax, semaphore_memory
	mov	word [bp-2], ax
	; >>>>> Line:	146
	; >>>>> sem->id = sem_dex++; 
	mov	ax, word [sem_dex]
	inc	word [sem_dex]
	mov	si, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	147
	; >>>>> sem->counter = initial_value; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	148
	; >>>>> sem->pend_task = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	150
	; >>>>> return sem; 
	mov	ax, word [bp-2]
L_yakc_33:
	mov	sp, bp
	pop	bp
	ret
L_yakc_30:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_31
L_yakc_37:
	DB	"YKSemPend called within interrupt",0
L_yakc_36:
	DB	"YKSemPend called on null semaphore",0
	ALIGN	2
YKSemPend:
	; >>>>> Line:	153
	; >>>>> void YKSemPend(YKSEM* semaphore){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	156
	; >>>>> if(!semaphore){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_40
	; >>>>> Line:	157
	; >>>>> printString("YKSemPend called on null semaphore"); 
	mov	ax, L_yakc_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	159
	; >>>>> return; 
	jmp	L_yakc_41
L_yakc_40:
	; >>>>> Line:	162
	; >>>>> if(YKCallDepth > 
	cmp	word [YKCallDepth], 0
	jle	L_yakc_42
	; >>>>> Line:	163
	; >>>>> printString("YKSemPend called within interrupt"); 
	mov	ax, L_yakc_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	164
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	165
	; >>>>> return; 
	jmp	L_yakc_41
L_yakc_42:
	; >>>>> Line:	168
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	170
	; >>>>> if(semaphore->counter-- <= 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	dec	word [si]
	test	ax, ax
	jg	L_yakc_43
	; >>>>> Line:	171
	; >>>>> task = ready_task; 
	mov	ax, word [ready_task]
	mov	word [bp-2], ax
	; >>>>> Line:	172
	; >>>>> ready_task = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [ready_task], ax
	; >>>>> Line:	174
	; >>>>> add_task(&semaphore->pend_task,task); 
	push	word [bp-2]
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	call	add_task
	add	sp, 4
	; >>>>> Line:	175
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_43:
	; >>>>> Line:	178
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_41:
	; >>>>> Line:	179
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_39
	ALIGN	2
YKSemPost:
	; >>>>> Line:	182
	; >>>>> void YKSemPost(YKSEM* semaphore){ 
	jmp	L_yakc_45
L_yakc_46:
	; >>>>> Line:	193
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	195
	; >>>>> semaphore->counter++; 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
	; >>>>> Line:	196
	; >>>>> if(semaphore->pend_task != 0){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	197
	; >>>>> task = semaphore->pend_task; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	198
	; >>>>> semaphore->pend_task = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	200
	; >>>>> i 
	push	word [bp-2]
	mov	ax, ready_task
	push	ax
	call	add_task
	add	sp, 4
	; >>>>> Line:	202
	; >>>>> if(YKCallDepth == 0){ 
	mov	ax, word [YKCallDepth]
	test	ax, ax
	jne	L_yakc_48
	; >>>>> Line:	203
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_48:
L_yakc_47:
	; >>>>> Line:	207
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_49:
	; >>>>> Line:	208
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_45:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_46
L_yakc_51:
	DB	"Out of available queue memory",0
	ALIGN	2
YKQCreate:
	; >>>>> Line:	211
	; >>>>> YKQ* YKQCreate(void **start, unsigned size){ 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	213
	; >>>>> if(q_dex >= 4){ 
	cmp	word [q_dex], 4
	jl	L_yakc_54
	; >>>>> Line:	214
	; >>>>> printString("Out of available queue memory"); 
	mov	ax, L_yakc_51
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	215
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	216
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	219
	; >>>>> q = q_memory + q_dex++; 
	mov	ax, word [q_dex]
	inc	word [q_dex]
	mov	cx, 10
	imul	cx
	add	ax, q_memory
	mov	word [bp-2], ax
	; >>>>> Line:	220
	; >>>>> q->buffer = start; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	221
	; >>>>> q->size = size; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	222
	; >>>>> q->tail = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	223
	; >>>>> q->count = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	224
	; >>>>> q->pend_task = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	225
	; >>>>> return q; 
	mov	ax, word [bp-2]
L_yakc_55:
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_53
L_yakc_57:
	DB	"YKQPend called on invalid queue",0
	ALIGN	2
YKQPend:
	; >>>>> Line:	229
	; >>>>> void* YKQPend(YKQ *queue){ 
	jmp	L_yakc_58
L_yakc_59:
	; >>>>> Line:	233
	; >>>>> if(!queue || !queue->size){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_61
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_60
L_yakc_61:
	; >>>>> Line:	234
	; >>>>> f(!queue || !queue->si 
	mov	ax, L_yakc_57
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	235
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	236
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_62
L_yakc_60:
	; >>>>> Line:	239
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	242
	; >>>>> while(queue->count == 0){ 
	jmp	L_yakc_64
L_yakc_63:
	; >>>>> Line:	243
	; >>>>> task = ready_task; 
	mov	ax, word [ready_task]
	mov	word [bp-4], ax
	; >>>>> Line:	244
	; >>>>> ready_task = ready_task->next; 
	mov	si, word [ready_task]
	add	si, 8
	mov	ax, word [si]
	mov	word [ready_task], ax
	; >>>>> Line:	245
	; >>>>> add_task(&queue->pend_task,task); 
	push	word [bp-4]
	mov	ax, word [bp+4]
	add	ax, 8
	push	ax
	call	add_task
	add	sp, 4
	; >>>>> Line:	246
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_64:
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_63
L_yakc_65:
	; >>>>> Line:	249
	; >>>>> msg = *(queue->buffer + queue->tail); 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	250
	; >>>>> queue->tail++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	251
	; >>>>> if(queue->tail >= queue->size) 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_66
	; >>>>> Line:	252
	; >>>>> queue->tail -= queue->size; 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	sub	word [si], ax
L_yakc_66:
	; >>>>> Line:	253
	; >>>>> queue->count--; 
	mov	si, word [bp+4]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	255
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	256
	; >>>>> return msg; 
	mov	ax, word [bp-2]
L_yakc_62:
	mov	sp, bp
	pop	bp
	ret
L_yakc_58:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_59
L_yakc_68:
	DB	"YKQPost called on invalid queue",0
	ALIGN	2
YKQPost:
	; >>>>> Line:	261
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_70
L_yakc_71:
	; >>>>> Line:	265
	; >>>>> if(!queue || !queue->si 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_73
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_72
L_yakc_73:
	; >>>>> Line:	266
	; >>>>> printString("YKQPost called on invalid queue"); 
	mov	ax, L_yakc_68
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	267
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	268
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_74
L_yakc_72:
	; >>>>> Line:	271
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	273
	; >>>>> if(queue->count == queue->size){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_75
	; >>>>> Line:	274
	; >>>>> goto err_return; 
	jmp	L_yakc_69
L_yakc_75:
	; >>>>> Line:	277
	; >>>>> head = queue->tail + queue->count; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	si, word [bp+4]
	add	si, 6
	add	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	278
	; >>>>> if(head >= queue->size) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jl	L_yakc_76
	; >>>>> Line:	279
	; >>>>> head -= queue->size; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	sub	word [bp-4], ax
L_yakc_76:
	; >>>>> Line:	280
	; >>>>> *(queue->buffer + head) = msg; 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	281
	; >>>>> queue->count++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
	; >>>>> Line:	283
	; >>>>> if(queue->pend_task){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_77
	; >>>>> Line:	284
	; >>>>> task = queue->pend_task; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	285
	; >>>>> queue->pend_task = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	286
	; >>>>> add_task(&ready_task,task); 
	push	word [bp-2]
	mov	ax, ready_task
	push	ax
	call	add_task
	add	sp, 4
	; >>>>> Line:	288
	; >>>>> if(YKCallDepth == 0){ 
	mov	ax, word [YKCallDepth]
	test	ax, ax
	jne	L_yakc_78
	; >>>>> Line:	289
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_78:
L_yakc_77:
	; >>>>> Line:	293
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	294
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yakc_74
L_yakc_69:
	; >>>>> Line:	297
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	298
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_74:
	mov	sp, bp
	pop	bp
	ret
L_yakc_70:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_71
L_yakc_80:
	DB	"Out of available event memory",0
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	301
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yakc_81
L_yakc_82:
	; >>>>> Line:	303
	; >>>>> if(event_dex >= 4){ 
	cmp	word [event_dex], 4
	jl	L_yakc_83
	; >>>>> Line:	304
	; >>>>> printString("Out of available event memory"); 
	mov	ax, L_yakc_80
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	305
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	306
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_84
L_yakc_83:
	; >>>>> Line:	309
	; >>>>> event = event_memory + event_dex; 
	mov	ax, word [event_dex]
	mov	cx, 22
	imul	cx
	add	ax, event_memory
	mov	word [bp-2], ax
	; >>>>> Line:	310
	; >>>>> event->id = event_dex++; 
	mov	ax, word [event_dex]
	inc	word [event_dex]
	mov	si, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	311
	; >>>>> event->flags = initialValue; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	312
	; >>>>> event->pend_task = 0; 
	mov	si, word [bp-2]
	add	si, 20
	mov	word [si], 0
	; >>>>> Line:	314
	; >>>>> return event; 
	mov	ax, word [bp-2]
L_yakc_84:
	mov	sp, bp
	pop	bp
	ret
L_yakc_81:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_82
L_yakc_88:
	DB	"YKEventPend called with invalid wait mode",0
L_yakc_87:
	DB	"YKEventPend called within interrupt",0
L_yakc_86:
	DB	"YKEventPend called on null event group",0
	ALIGN	2
YKEventPend:
	; >>>>> Line:	317
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	321
	; >>>>> if(!event){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_91
	; >>>>> Line:	322
	; >>>>> ask) == 0))){ 
	mov	ax, L_yakc_86
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	323
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	324
	; >>>>> return event->flags; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	jmp	L_yakc_92
L_yakc_91:
	; >>>>> Line:	327
	; >>>>> if(YKCallDepth > 0){ 
	cmp	word [YKCallDepth], 0
	jle	L_yakc_93
	; >>>>> Line:	328
	; >>>>> printString("YKEventPend called within interrupt"); 
	mov	ax, L_yakc_87
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	329
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	330
	; >>>>> return event->flags; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	jmp	L_yakc_92
L_yakc_93:
	; >>>>> Line:	333
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	334
	; >>>>> if(waitMode > 2){ 
	cmp	word [bp+8], 2
	jle	L_yakc_94
	; >>>>> Line:	335
	; >>>>> printString("YKEventPend called with invalid wait mode"); 
	mov	ax, L_yakc_88
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	336
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	337
	; >>>>> return event->flags; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	jmp	L_yakc_92
L_yakc_94:
	; >>>>> Line:	340
	; >>>>> if(((waitMode == 1) && ((event->flags & eventMask) != eventMask)) || ((waitMode == 2) && ((event->flags & eventMask) == 0))){ 
	cmp	word [bp+8], 1
	jne	L_yakc_97
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	jne	L_yakc_96
L_yakc_97:
	cmp	word [bp+8], 2
	jne	L_yakc_95
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp+6]
	jne	L_yakc_95
L_yakc_96:
	; >>>>> Line:	341
	; >>>>> task =  
	mov	ax, word [ready_task]
	mov	word [bp-2], ax
	; >>>>> Line:	342
	; >>>>> ready_task = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [ready_task], ax
	; >>>>> Line:	343
	; >>>>> task->next = event->pend_task; 
	mov	si, word [bp+4]
	add	si, 20
	mov	di, word [bp-2]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	344
	; >>>>> event->pend_task = task; 
	mov	si, word [bp+4]
	add	si, 20
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	345
	; >>>>> event->status[task->id].event_mask = eventMask; 
	mov	si, word [bp-2]
	mov	al, byte [si]
	cbw
	shl	ax, 1
	shl	ax, 1
	add	ax, word [bp+4]
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	346
	; >>>>> event->status[task->id].wait_mode = waitMode; 
	mov	si, word [bp-2]
	mov	al, byte [si]
	cbw
	shl	ax, 1
	shl	ax, 1
	add	ax, word [bp+4]
	mov	si, ax
	add	si, 6
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	347
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_95:
	; >>>>> Line:	350
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	351
	; >>>>> return event->flags; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
L_yakc_92:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_90
	ALIGN	2
YKEventSet:
	; >>>>> Line:	354
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_99
L_yakc_100:
	; >>>>> Line:	360
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	362
	; >>>>> event->flags |= eventMask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	or	word [si], ax
	; >>>>> Line:	363
	; >>>>> task = event->pend_task; 
	mov	si, word [bp+4]
	add	si, 20
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	364
	; >>>>> prev = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	365
	; >>>>> while(task){ 
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	366
	; >>>>> ExitMutex( 
	mov	si, word [bp-2]
	mov	al, byte [si]
	cbw
	shl	ax, 1
	shl	ax, 1
	add	ax, word [bp+4]
	mov	si, ax
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	367
	; >>>>> wait_mode = event->status[task->id].wait_mode; 
	mov	si, word [bp-2]
	mov	al, byte [si]
	cbw
	shl	ax, 1
	shl	ax, 1
	add	ax, word [bp+4]
	mov	si, ax
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	368
	; >>>>> if(((wait_mode == 1) && ((event->flags & event_mask) == event_mask)) || ((wait_mode == 2) && ((event->flags & event_mask) != 0))){ 
	cmp	word [bp-8], 1
	jne	L_yakc_106
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp-6]
	mov	dx, word [bp-6]
	cmp	dx, ax
	je	L_yakc_105
L_yakc_106:
	cmp	word [bp-8], 2
	jne	L_yakc_104
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	and	ax, word [bp-6]
	je	L_yakc_104
L_yakc_105:
	; >>>>> Line:	369
	; >>>>> if(prev){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_107
	; >>>>> Line:	370
	; >>>>> prev->next = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	371
	; >>>>> add_task(&ready_task,task); 
	push	word [bp-2]
	mov	ax, ready_task
	push	ax
	call	add_task
	add	sp, 4
	; >>>>> Line:	372
	; >>>>> task = prev->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	374
	; >>>>> event->pend_task = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 20
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	375
	; >>>>> add_task(&ready_task,task); 
	push	word [bp-2]
	mov	ax, ready_task
	push	ax
	call	add_task
	add	sp, 4
	; >>>>> Line:	376
	; >>>>> task = event->pend_task; 
	mov	si, word [bp+4]
	add	si, 20
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_108:
	jmp	L_yakc_109
L_yakc_104:
	; >>>>> Line:	380
	; >>>>> prev = task; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	381
	; >>>>> task = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_109:
L_yakc_102:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_101
L_yakc_103:
	; >>>>> Line:	385
	; >>>>> YKExitMutex( 
	call	YKExitMutex
L_yakc_110:
	; >>>>> Line:	386
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_99:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_100
	ALIGN	2
YKEventReset:
	; >>>>> Line:	389
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_112
L_yakc_113:
	; >>>>> Line:	390
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	391
	; >>>>> event->flags &= ~eventMask; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	not	ax
	and	word [si], ax
	; >>>>> Line:	392
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_112:
	push	bp
	mov	bp, sp
	jmp	L_yakc_113
	ALIGN	2
pop_task:
	; >>>>> Line:	395
	; >>>>> static tcb_t* pop_task(tcb_t** root){ 
	jmp	L_yakc_115
L_yakc_116:
	; >>>>> Line:	397
	; >>>>> *root = task->next; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	397
	; >>>>> *root = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	398
	; >>>>> return task; 
	mov	ax, word [bp-2]
L_yakc_117:
	mov	sp, bp
	pop	bp
	ret
L_yakc_115:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_116
	ALIGN	2
add_task:
	; >>>>> Line:	401
	; >>>>> static void add_task(tcb_t** root, tcb_t* task){ 
	jmp	L_yakc_119
L_yakc_120:
	; >>>>> Line:	403
	; >>>>> task->next = 0; 
	mov	si, word [bp+6]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	404
	; >>>>> if(*root == 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_121
	; >>>>> Line:	405
	; >>>>> *root = task; 
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	406
	; >>>>> return; 
	jmp	L_yakc_122
L_yakc_121:
	; >>>>> Line:	409
	; >>>>> if(task->priority < (*root)->priority){ 
	mov	si, word [bp+6]
	inc	si
	mov	di, word [bp+4]
	mov	di, word [di]
	inc	di
	mov	al, byte [di]
	cmp	al, byte [si]
	jle	L_yakc_123
	; >>>>> Line:	410
	; >>>>> task->next = *root; 
	mov	si, word [bp+4]
	mov	di, word [bp+6]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	411
	; >>>>> *root = task; 
	mov	si, word [bp+4]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	412
	; >>>>> return; 
	jmp	L_yakc_122
L_yakc_123:
	; >>>>> Line:	415
	; >>>>> current = *root; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	416
	; >>>>> while(curren 
	jmp	L_yakc_125
L_yakc_124:
	; >>>>> Line:	417
	; >>>>> current = current->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_125:
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_127
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	inc	si
	mov	di, word [bp+6]
	inc	di
	mov	al, byte [di]
	cmp	al, byte [si]
	jg	L_yakc_124
L_yakc_127:
L_yakc_126:
	; >>>>> Line:	419
	; >>>>> task->next = current->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+6]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	420
	; >>>>> current->next = task; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+6]
	mov	word [si], ax
L_yakc_122:
	mov	sp, bp
	pop	bp
	ret
L_yakc_119:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_120
	ALIGN	2
block_task:
	; >>>>> Line:	423
	; >>>>> static void block_task(tcb_t* task){ 
	jmp	L_yakc_129
L_yakc_130:
	; >>>>> Line:	425
	; >>>>> task->next = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	426
	; >>>>> if(blocked_task == 0){ 
	mov	ax, word [blocked_task]
	test	ax, ax
	jne	L_yakc_131
	; >>>>> Line:	427
	; >>>>> blocked_task = task; 
	mov	ax, word [bp+4]
	mov	word [blocked_task], ax
	; >>>>> Line:	428
	; >>>>> return; 
	jmp	L_yakc_132
L_yakc_131:
	; >>>>> Line:	430
	; >>>>> if(task->tick_num < blocked_task->tick_num){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [blocked_task]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_133
	; >>>>> Line:	431
	; >>>>> task->next = blocked_task; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [blocked_task]
	mov	word [si], ax
	; >>>>> Line:	432
	; >>>>> blocked_task = task; 
	mov	ax, word [bp+4]
	mov	word [blocked_task], ax
	; >>>>> Line:	433
	; >>>>> return; 
	jmp	L_yakc_132
L_yakc_133:
	; >>>>> Line:	435
	; >>>>> current = blocked_task; 
	mov	ax, word [blocked_task]
	mov	word [bp-2], ax
	; >>>>> Line:	436
	; >>>>> while(current->next && (current->next->tick_num < task->tick_num)){ 
	jmp	L_yakc_135
L_yakc_134:
	; >>>>> Line:	437
	; >>>>> current  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_135:
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_137
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_134
L_yakc_137:
L_yakc_136:
	; >>>>> Line:	439
	; >>>>> task->next = current->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	440
	; >>>>> current->next = task; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
L_yakc_132:
	; >>>>> Line:	442
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_129:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_130
	ALIGN	2
init_tcb:
	TIMES	10 db 0
tcb_memory:
	TIMES	40 db 0
idle_stack:
	TIMES	512 db 0
semaphore_memory:
	TIMES	24 db 0
q_memory:
	TIMES	40 db 0
event_memory:
	TIMES	88 db 0
;;; yaks.s

YKEnterMutex:
        cli
        ret

YKExitMutex:
        sti
        ret

YKEnterISR:
	; >>>>> void YKEnterISR(void){ 
	; >>>>> YKCallDepth++; 
	inc	word [YKCallDepth]
	ret

YKExitISR:
	; >>>>> void YKExitISR(void){ 
	; >>>>> if((--YKCallDepth) == 0){ 
	mov	ax, word [YKCallDepth]
	dec	ax
	mov	word [YKCallDepth], ax
	test	ax, ax
	jne	exitisr_ret
	; >>>>> YKScheduler(); 
	call	YKScheduler
exitisr_ret:
	ret

YKIdleTask:
	inc	word [YKIdleCount]
	nop
	nop
	jmp	YKIdleTask

YKScheduler:
	; >>>>> if(!kernel_running || active_task == ready_task){ 
	mov	ax, word [kernel_running]
	test	ax, ax
	je	sched_ret
	mov	ax, word [ready_task]
	cmp	ax, word [active_task]
	je	sched_ret
	
	; >>>>> YKDispatcher(ready_task); 
	
	call	YKDispatcher
sched_ret:
	; >>>>> return;
	ret

YKDispatcher:
	mov	ax,[YKCallDepth]
	test	ax,ax
	jne	dispatch_l1
;;; Store context
	add	sp,2		;Valid for both cases
	pop	ax
	pushf
	push	cs
	push	ax

	mov	ax,0
	push	ax		;ax?
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	jmp	dispatch_l2

dispatch_l1:
	add	sp,4
dispatch_l2:	
	mov	bx, word[active_task]
	mov	word[bx+4],ss
	mov	word[bx+6],sp

	mov	bx, word[ready_task]	;get arg - tcb pointer
	mov	ss, word[bx+4]		;restore ss
	mov	sp, word[bx+6]		;restore sp
	inc	word[YKCtxSwCount] 	;Increment context switch counter
	mov	[active_task],bx
	
;;; Restore context
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret
	align	2
SlidePiece:	; void SlidePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 0		; Slide piece operation
  	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
RotatePiece:	; void RotatePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 1		; Rotate piece operation
 	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
SeedSimptris:	; void SeedSimptris(long seed)
	push	bp
	mov	bp, sp
	push	ax
	push	cx
	push    dx
 	mov	ah, 2		; Seed operation
	mov	dx, [bp+4]	; Move loword of seed
	mov	cx, [bp+6]	; Move hiword of seed
	int	1Bh		; Call Simptris services
	pop	dx
	pop	cx
	pop	ax
	pop	bp
	ret
StartSimptris:	; void StartSimptris(void)
	push	ax
 	mov	ah, 3		; Start Simptris operation
	int	1Bh		; Call Simptris services
	pop	ax
	ret



gameover_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

	call 	gameover_handler
	
	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret

newpiece_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

	call 	newpiece_handler
	
	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret

command_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

	call 	command_handler
	
	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret

touchdown_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

	call 	touchdown_handler
	
	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret

lineclear_isr:
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
	push	di
	push	bp
	push	es
	push	ds
	sti
	call	YKEnterISR

	call 	lineclear_handler
	
	cli
	call	signalEOI
	call	YKExitISR
	pop	ds
	pop	es
	pop	bp
	pop	di
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	iret

; Generated by c86 (BYU-NASM) 5.1 (beta) from sih.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_sih_1:
	DB	"Game over. Lines cleared: ",0
	ALIGN	2
gameover_handler:
	; >>>>> Line:	30
	; >>>>> void gameover_handler(){ 
	jmp	L_sih_2
L_sih_3:
	; >>>>> Line:	31
	; >>>>> printString("Game over. Lines cleared: "); 
	mov	ax, L_sih_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printInt(score); 
	push	word [score]
	call	printInt
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_sih_2:
	push	bp
	mov	bp, sp
	jmp	L_sih_3
	ALIGN	2
L_sih_5:
	DW	0
	ALIGN	2
newpiece_handler:
	; >>>>> Line:	37
	; >>>>> void newpiece_handler(){ 
	jmp	L_sih_6
L_sih_7:
	; >>>>> Line:	39
	; >>>>> piece = new_piece + dex; 
	mov	ax, word [L_sih_5]
	mov	cx, 12
	imul	cx
	add	ax, new_piece
	mov	word [piece], ax
	; >>>>> Line:	40
	; >>>>> if(++dex >= 8) 
	mov	ax, word [L_sih_5]
	inc	ax
	mov	word [L_sih_5], ax
	cmp	ax, 8
	jl	L_sih_8
	; >>>>> Line:	41
	; >>>>> dex = 0; 
	mov	word [L_sih_5], 0
L_sih_8:
	; >>>>> Line:	42
	; >>>>> piece->id = NewPieceID; 
	mov	si, word [piece]
	mov	ax, word [NewPieceID]
	mov	word [si], ax
	; >>>>> Line:	43
	; >>>>> piece->type = NewPieceType; 
	mov	si, word [piece]
	add	si, 2
	mov	ax, word [NewPieceType]
	mov	word [si], ax
	; >>>>> Line:	44
	; >>>>> piece->x = NewPieceColumn; 
	mov	si, word [piece]
	add	si, 4
	mov	ax, word [NewPieceColumn]
	mov	word [si], ax
	; >>>>> Line:	45
	; >>>>> piece->rot = NewPieceOrientation; 
	mov	si, word [piece]
	add	si, 6
	mov	ax, word [NewPieceOrientation]
	mov	word [si], ax
	; >>>>> Line:	46
	; >>>>> YKQPost(new_q,piece); 
	push	word [piece]
	push	word [new_q]
	call	YKQPost
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_sih_6:
	push	bp
	mov	bp, sp
	jmp	L_sih_7
	ALIGN	2
command_handler:
	; >>>>> Line:	49
	; >>>>> void  
	jmp	L_sih_10
L_sih_11:
	; >>>>> Line:	50
	; >>>>> YKSemPost(cmd_sem); 
	push	word [cmd_sem]
	call	YKSemPost
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_sih_10:
	push	bp
	mov	bp, sp
	jmp	L_sih_11
	ALIGN	2
touchdown_handler:
	; >>>>> Line:	53
	; >>>>> void touchdown_handler(){ 
	jmp	L_sih_13
L_sih_14:
	; >>>>> Line:	58
	; >>>>> bc0 = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	59
	; >>>>> bc1 = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	61
	; >>>>> b0 = (ScreenBitMap0 | ScreenBitMap1 | ScreenBitMap2); 
	mov	ax, word [ScreenBitMap0]
	or	ax, word [ScreenBitMap1]
	or	ax, word [ScreenBitMap2]
	mov	word [bp-2], ax
	; >>>>> Line:	62
	; >>>>> while(b0 != 0){ 
	jmp	L_sih_16
L_sih_15:
	; >>>>> Line:	63
	; >>>>> bc0++; 
	inc	word [bp-6]
	; >>>>> Line:	64
	; >>>>> b0 = b0 << 1; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	word [bp-2], ax
L_sih_16:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_sih_15
L_sih_17:
	; >>>>> Line:	66
	; >>>>> bin[0].ht = bc0; 
	mov	ax, word [bp-6]
	mov	word [(2+bin)], ax
	; >>>>> Line:	67
	; >>>>> b1 = (ScreenBitMap3 | ScreenBitMap4 | ScreenBitMap5); 
	mov	ax, word [ScreenBitMap3]
	or	ax, word [ScreenBitMap4]
	or	ax, word [ScreenBitMap5]
	mov	word [bp-4], ax
	; >>>>> Line:	68
	; >>>>> while(b1 != 0){ 
	jmp	L_sih_19
L_sih_18:
	; >>>>> Line:	69
	; >>>>> bc1++; 
	inc	word [bp-8]
	; >>>>> Line:	70
	; >>>>> b1 = b1 << 1; 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	word [bp-4], ax
L_sih_19:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_sih_18
L_sih_20:
	; >>>>> Line:	72
	; >>>>> bin[1].ht = bc1; 
	mov	ax, word [bp-8]
	mov	word [(8+bin)], ax
	mov	sp, bp
	pop	bp
	ret
L_sih_13:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_sih_14
	ALIGN	2
lineclear_handler:
	; >>>>> Line:	75
	; >>>>> void lineclear_handler(){ 
	jmp	L_sih_22
L_sih_23:
	; >>>>> Line:	76
	; >>>>> score++; 
	inc	word [score]
	mov	sp, bp
	pop	bp
	ret
L_sih_22:
	push	bp
	mov	bp, sp
	jmp	L_sih_23
	ALIGN	2
new_piece:
	TIMES	96 db 0
piece:
	TIMES	2 db 0
score:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from main.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_main_3:
	DB	"Finished initializing kernel",0
L_main_2:
	DB	"Creating queues and semaphores",0
L_main_1:
	DB	"Initializing kernel",0
	ALIGN	2
main:
	; >>>>> Line:	41
	; >>>>> void main(void){ 
	jmp	L_main_4
L_main_5:
	; >>>>> Line:	42
	; >>>>> printString("Initializing kernel"); 
	mov	ax, L_main_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	44
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	46
	; >>>>> printString("Creating queues and semaphores"); 
	mov	ax, L_main_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	49
	; >>>>> cmd_sem = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [cmd_sem], ax
	; >>>>> Line:	50
	; >>>>> cmd_q = YKQCreate(cmd_buffer, 64); 
	mov	ax, 64
	push	ax
	mov	ax, cmd_buffer
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [cmd_q], ax
	; >>>>> Line:	51
	; >>>>> new_q = YKQCreate(new_buffer,64); 
	mov	ax, 64
	push	ax
	mov	ax, new_buffer
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [new_q], ax
	; >>>>> Line:	52
	; >>>>> YKNewTask(stats_task, (void*) &stats_task_stack[256],0); 
	xor	al, al
	push	ax
	mov	ax, (stats_task_stack+512)
	push	ax
	mov	ax, stats_task
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	54
	; >>>>> printString("Finished initializing kernel"); 
	mov	ax, L_main_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	55
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	56
	; >>>>> SeedSimptris(73706); 
	mov	ax, 8170
	mov	dx, 1
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	57
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_main_4:
	push	bp
	mov	bp, sp
	jmp	L_main_5
L_main_7:
	DB	"cmd task begun",0
	ALIGN	2
cmd_task:
	; >>>>> Line:	60
	; >>>>> void cmd_task(void){ 
	jmp	L_main_8
L_main_9:
	; >>>>> Line:	66
	; >>>>> printString("cmd task begun"); 
	mov	ax, L_main_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	67
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	69
	; >>>>> while(1){ 
	jmp	L_main_11
L_main_10:
	; >>>>> Line:	70
	; >>>>> cmd = (int) YKQPend(cmd_q); 
	push	word [cmd_q]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	71
	; >>>>> id = (cmd >> 2); 
	mov	ax, word [bp-2]
	sar	ax, 1
	sar	ax, 1
	mov	word [bp-8], ax
	; >>>>> Line:	72
	; >>>>> dir = (cmd & 1); 
	mov	ax, word [bp-2]
	and	ax, 1
	mov	word [bp-4], ax
	; >>>>> Line:	73
	; >>>>> mode = ((cmd >> 1) & 1); 
	mov	ax, word [bp-2]
	sar	ax, 1
	and	ax, 1
	mov	word [bp-6], ax
	; >>>>> Line:	75
	; >>>>> YKSemPend(cmd_sem); 
	push	word [cmd_sem]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	76
	; >>>>> if(mode){ 
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_main_13
	; >>>>> Line:	77
	; >>>>> SlidePiece(id,dir); 
	push	word [bp-4]
	push	word [bp-8]
	call	SlidePiece
	add	sp, 4
	jmp	L_main_14
L_main_13:
	; >>>>> Line:	79
	; >>>>> RotatePiece(id,dir); 
	push	word [bp-4]
	push	word [bp-8]
	call	RotatePiece
	add	sp, 4
L_main_14:
L_main_11:
	jmp	L_main_10
L_main_12:
	mov	sp, bp
	pop	bp
	ret
L_main_8:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_main_9
L_main_16:
	DB	"placement task begun",0
	ALIGN	2
placement_task:
	; >>>>> Line:	90
	; >>>>> void placement_task(void){ 
	jmp	L_main_17
L_main_18:
	; >>>>> Line:	95
	; >>>>> bin[0].ht = 0; 
	mov	word [(2+bin)], 0
	; >>>>> Line:	96
	; >>>>> bin[1].ht = 1; 
	mov	word [(8+bin)], 1
	; >>>>> Line:	97
	; >>>>> bin[0].flat = 0x01; 
	mov	word [bin], 1
	; >>>>> Line:	98
	; >>>>> bin[1].flat = 0x02; 
	mov	word [(6+bin)], 2
	; >>>>> Line:	99
	; >>>>> bin[0].x = 0; 
	mov	word [(4+bin)], 0
	; >>>>> Line:	100
	; >>>>> bin[1 
	mov	word [(10+bin)], 5
	; >>>>> Line:	102
	; >>>>> printString("placement task begun"); 
	mov	ax, L_main_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	103
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	105
	; >>>>> while(1){ 
	jmp	L_main_20
L_main_19:
	; >>>>> Line:	106
	; >>>>> new = (struct piece*)YKQPend(new_q); 
	push	word [new_q]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	107
	; >>>>> if(new->x == 0){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_main_22
	; >>>>> Line:	108
	; >>>>> cmd = ((new->id << 2) | (1 << 1) | 1); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	shl	ax, 1
	shl	ax, 1
	or	ax, 2
	or	ax, 1
	mov	word [bp-6], ax
	; >>>>> Line:	109
	; >>>>> YKQPost(cmd_q,(void*)cmd); 
	push	word [bp-6]
	push	word [cmd_q]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	110
	; >>>>> new->x = 1; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 1
	jmp	L_main_23
L_main_22:
	; >>>>> Line:	111
	; >>>>> }else if(new->x == 5){ 
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 5
	jne	L_main_24
	; >>>>> Line:	112
	; >>>>> cmd = ((new->id << 2) | (1 << 1) | 0); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	shl	ax, 1
	shl	ax, 1
	or	ax, 2
	mov	word [bp-6], ax
	; >>>>> Line:	113
	; >>>>> YKQPost(cmd_q,(void*)cmd); 
	push	word [bp-6]
	push	word [cmd_q]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	114
	; >>>>> new->x = 4; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 4
L_main_24:
L_main_23:
	; >>>>> Line:	116
	; >>>>> if(new->type == 1){ 
	mov	si, word [bp-2]
	add	si, 2
	cmp	word [si], 1
	jne	L_main_25
	; >>>>> Line:	117
	; >>>>> switch(bin[0].flat + bin[1].flat){ 
	mov	ax, word [(6+bin)]
	add	ax, word [bin]
	dec	ax
	je	L_main_27
	dec	ax
	je	L_main_28
	dec	ax
	je	L_main_29
	jmp	L_main_26
L_main_27:
	; >>>>> Line:	119
	; >>>>> new->trans = bin[0].x + 1 - new->x; 
	mov	ax, word [(4+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	inc	ax
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	120
	; >>>>> break; 
	jmp	L_main_26
L_main_28:
	; >>>>> Line:	122
	; >>>>> ; 
	mov	ax, word [(10+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	123
	; >>>>> break; 
	jmp	L_main_26
L_main_29:
	; >>>>> Line:	125
	; >>>>> if(bin[0].ht == bin[1].ht){ 
	mov	ax, word [(8+bin)]
	cmp	ax, word [(2+bin)]
	jne	L_main_30
	; >>>>> Line:	126
	; >>>>> if(new->x <= 3){ 
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jg	L_main_31
	; >>>>> Line:	127
	; >>>>> new->trans = bin[0].x + 1 - new->x; 
	mov	ax, word [(4+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	inc	ax
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	jmp	L_main_32
L_main_31:
	; >>>>> Line:	129
	; >>>>> new->trans = bin[1].x - 1 - new->x; 
	mov	ax, word [(10+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
L_main_32:
	jmp	L_main_33
L_main_30:
	; >>>>> Line:	131
	; >>>>> }else if(bin[0].ht<bin[1].ht){ 
	mov	ax, word [(8+bin)]
	cmp	ax, word [(2+bin)]
	jle	L_main_34
	; >>>>> Line:	132
	; >>>>> new->trans = bin[0].x + 1 - new->x; 
	mov	ax, word [(4+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	inc	ax
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	jmp	L_main_35
L_main_34:
	; >>>>> Line:	134
	; >>>>> new->trans = bin[1].x - 1 - new->x; 
	mov	ax, word [(10+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	dec	ax
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
L_main_35:
L_main_33:
L_main_26:
	; >>>>> Line:	136
	; >>>>> break; 
	jmp	L_main_36
L_main_25:
	; >>>>> Line:	140
	; >>>>> switch(bin[0].flat + bin[1].flat){ 
	mov	ax, word [(6+bin)]
	add	ax, word [bin]
	dec	ax
	je	L_main_38
	dec	ax
	je	L_main_39
	dec	ax
	je	L_main_40
	jmp	L_main_37
L_main_38:
	; >>>>> Line:	143
	; >>>>> new->trans = bin[1].x -2 - new->x; 
	mov	ax, word [(10+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	add	ax, -2
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	144
	; >>>>> new->rot = 3-new->rot; 
	mov	ax, 3
	mov	si, word [bp-2]
	add	si, 6
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	145
	; >>>>> rot; 
	mov	word [(6+bin)], 2
	; >>>>> Line:	146
	; >>>>> break; 
	jmp	L_main_37
L_main_39:
	; >>>>> Line:	149
	; >>>>> new->trans = bin[0].x + 2 - new->x; 
	mov	ax, word [(4+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	add	ax, 2
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	150
	; >>>>> new->rot = 2-new->rot; 
	mov	ax, 2
	mov	si, word [bp-2]
	add	si, 6
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	151
	; >>>>> bin[0].flat = 0x01; 
	mov	word [bin], 1
	; >>>>> Line:	152
	; >>>>> break; 
	jmp	L_main_37
L_main_40:
	; >>>>> Line:	154
	; >>>>> if(bin[0].ht == bin[1].ht){ 
	mov	ax, word [(8+bin)]
	cmp	ax, word [(2+bin)]
	jne	L_main_41
	; >>>>> Line:	155
	; >>>>> if(new->x <= 3){ 
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jg	L_main_42
	; >>>>> Line:	156
	; >>>>> new->trans = bin[0].x-new->x; 
	mov	ax, word [(4+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	157
	; >>>>> new->rot = 0 - new->rot; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	neg	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	158
	; >>>>> bin[0].flat = 0; 
	mov	word [bin], 0
	jmp	L_main_43
L_main_42:
	; >>>>> Line:	160
	; >>>>> new->trans = bin[1].x - new->x; 
	mov	ax, word [(10+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	161
	; >>>>> new->rot = 1 - new->rot; 
	mov	ax, 1
	mov	si, word [bp-2]
	add	si, 6
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	162
	; >>>>> bin[1].flat = 0; 
	mov	word [(6+bin)], 0
L_main_43:
	jmp	L_main_44
L_main_41:
	; >>>>> Line:	164
	; >>>>> }else if(bin[0].ht<bin[1].ht){ 
	mov	ax, word [(8+bin)]
	cmp	ax, word [(2+bin)]
	jle	L_main_45
	; >>>>> Line:	166
	; >>>>> new->trans = bin[0].x-new->x; 
	mov	ax, word [(4+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	167
	; >>>>> new->rot = 0 - new->rot; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	neg	ax
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	168
	; >>>>> w->tr 
	mov	word [bin], 0
	jmp	L_main_46
L_main_45:
	; >>>>> Line:	171
	; >>>>> new->trans = bin[1].x - new->x; 
	mov	ax, word [(10+bin)]
	mov	si, word [bp-2]
	add	si, 4
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	172
	; >>>>> new->rot = 1 - new->rot; 
	mov	ax, 1
	mov	si, word [bp-2]
	add	si, 6
	sub	ax, word [si]
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	173
	; >>>>> bin[1].flat = 0; 
	mov	word [(6+bin)], 0
L_main_46:
L_main_44:
L_main_37:
L_main_36:
	; >>>>> Line:	175
	; >>>>> break; 
	; >>>>> Line:	179
	; >>>>> dir = new->rot < 0; 
	mov	si, word [bp-2]
	add	si, 6
	cmp	word [si], 0
	jl	L_main_47
	xor	ax, ax
	jmp	L_main_48
L_main_47:
	mov	ax, 1
L_main_48:
	mov	word [bp-4], ax
	; >>>>> Line:	180
	; >>>>> cmd = ((new->id << 2) | (0 << 1) | dir); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	shl	ax, 1
	shl	ax, 1
	or	ax, word [bp-4]
	mov	word [bp-6], ax
	; >>>>> Line:	181
	; >>>>> while(new->rot){ 
	jmp	L_main_50
L_main_49:
	; >>>>> Line:	182
	; >>>>> YKQPost(cmd_q,(void*)cmd); 
	push	word [bp-6]
	push	word [cmd_q]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	183
	; >>>>> if(dir) 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_main_52
	; >>>>> Line:	184
	; >>>>> new->rot++; 
	mov	si, word [bp-2]
	add	si, 6
	inc	word [si]
	jmp	L_main_53
L_main_52:
	; >>>>> Line:	186
	; >>>>> new->rot--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
L_main_53:
L_main_50:
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_main_49
L_main_51:
	; >>>>> Line:	189
	; >>>>> dir = new->trans > 0; 
	mov	si, word [bp-2]
	add	si, 8
	cmp	word [si], 0
	jg	L_main_54
	xor	ax, ax
	jmp	L_main_55
L_main_54:
	mov	ax, 1
L_main_55:
	mov	word [bp-4], ax
	; >>>>> Line:	190
	; >>>>> cmd = ((new->id << 2) | (1 << 1) | dir); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	shl	ax, 1
	shl	ax, 1
	or	ax, 2
	or	ax, word [bp-4]
	mov	word [bp-6], ax
	; >>>>> Line:	191
	; >>>>> while(new->trans){ 
	jmp	L_main_57
L_main_56:
	; >>>>> Line:	192
	; >>>>> YKQPost(cmd_q,(void*)cmd); 
	push	word [bp-6]
	push	word [cmd_q]
	call	YKQPost
	add	sp, 4
	; >>>>> Line:	193
	; >>>>> if(dir) 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_main_59
	; >>>>> Line:	194
	; >>>>> new->trans--; 
	mov	si, word [bp-2]
	add	si, 8
	dec	word [si]
	jmp	L_main_60
L_main_59:
	; >>>>> Line:	196
	; >>>>> new->tr 
	mov	si, word [bp-2]
	add	si, 8
	inc	word [si]
L_main_60:
L_main_57:
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_main_56
L_main_58:
L_main_20:
	jmp	L_main_19
L_main_21:
	mov	sp, bp
	pop	bp
	ret
L_main_17:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_main_18
L_main_66:
	DB	"%>",0xD,0xA,0
L_main_65:
	DB	", CPU: ",0
L_main_64:
	DB	"<CS: ",0
L_main_63:
	DB	"Determining CPU capacity",0xD,0xA,0
L_main_62:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
stats_task:
	; >>>>> Line:	201
	; >>>>> void stats_task(void){ 
	jmp	L_main_67
L_main_68:
	; >>>>> Line:	205
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	206
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_main_62
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	207
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_main_63
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	208
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	209
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	210
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	211
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	cwd
	mov	cx, 25
	idiv	cx
	mov	word [bp-2], ax
	; >>>>> Line:	212
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	214
	; >>>>> YKNewTask(placement_task, (void *) &placement_task_stack[256], 2); 
	mov	al, 2
	push	ax
	mov	ax, (placement_task_stack+512)
	push	ax
	mov	ax, placement_task
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	215
	; >>>>> YKNewTask(cmd_task, (void *) &cmd_task_stack[256], 1); 
	mov	al, 1
	push	ax
	mov	ax, (cmd_task_stack+512)
	push	ax
	mov	ax, cmd_task
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	216
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	218
	; >>>>> while (1){ 
	jmp	L_main_70
L_main_69:
	; >>>>> Line:	219
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	221
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	222
	; >>>>>  
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	223
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	224
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	226
	; >>>>> printString("<CS: "); 
	mov	ax, L_main_64
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	227
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	228
	; >>>>> printString(", CPU: "); 
	mov	ax, L_main_65
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	229
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	230
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	231
	; >>>>> printString("%>\r\n"); 
	mov	ax, L_main_66
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	233
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	234
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	235
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	236
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_main_70:
	jmp	L_main_69
L_main_71:
	mov	sp, bp
	pop	bp
	ret
L_main_67:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_main_68
	ALIGN	2
new_q:
	TIMES	2 db 0
cmd_sem:
	TIMES	2 db 0
bin:
	TIMES	12 db 0
stats_task_stack:
	TIMES	512 db 0
cmd_task_stack:
	TIMES	512 db 0
placement_task_stack:
	TIMES	512 db 0
cmd_buffer:
	TIMES	128 db 0
cmd_q:
	TIMES	2 db 0
new_buffer:
	TIMES	128 db 0
pieces:
	TIMES	192 db 0
